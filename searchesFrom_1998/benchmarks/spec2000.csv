http://ieeexplore.ieee.org.ezproxy.rit.edu/search/searchresult.jsp?bulkSetSize=2000&download-format=download-csv&refinements%3D4291944822%2C4291944246%26ranges%3D1998_2016_p_Publication_Year%26matchBoolean%3Dtrue%26searchField%3DSearch_All_Text%26queryText%3D%28%28.QT.SPEC2000.QT.%29+AND+.QT.Intrusion+Detection+System.QT.%29,11/20/2015 17:26,"((""SPEC2000"") AND ""Intrusion Detection System"")",IEEE,,,,,,,,,,,,,,,,,,,,,,,,,,
Document Title,Authors,Author Affiliations,Publication Title,Date Added To Xplore,Year,Volume,Issue,Start Page,End Page,Abstract,ISSN,ISBN,EISBN,DOI,PDF Link,Author Keywords,IEEE Terms,INSPEC Controlled Terms,INSPEC Non-Controlled Terms,MeSH Terms,Article Citation Count,Patent Citation Count,Reference Count,Copyright Year,Online Date,Issue Date,Meeting Date,Publisher,Document Identifier
Stream cipher hash based execution monitoring (SCHEM) framework for intrusion detection on embedded processors,"Chaudhari, A.; Abraham, J.","Comput. Eng. Res. Center, Univ. of Texas at Austin, Austin, TX, USA","On-Line Testing Symposium (IOLTS), 2012 IEEE 18th International",20120927,2012,,,162,167,"Hardware based execution monitoring of applications holds the promise for an effective and tamper-proof solution for intrusion detection on processor. This paper presents a practical hardware based intrusion detection framework which uses stream cipher based hashing techniques for runtime control flow and instruction integrity monitoring. This framework enables accurate monitoring of the control flow of a process with an instruction level granularity. Additional hardware required for implementation of our framework has very low power and area overheads which makes it possible to practically implement execution monitoring even on embedded processors. Our technique achieves an order of magnitude lower power overhead compared to other similar techniques. Furthermore, our implementation of the developed framework has a low intrusion detection latency, which enables us to verify the control flow integrity of the executing code before the violating control flow instructions are retired from the processor pipeline.",,978-1-4673-2082-5,,10.1109/IOLTS.2012.6313864,http://ieeexplore.ieee.org.ezproxy.rit.edu/stamp/stamp.jsp?arnumber=6313864,,Engines;Monitoring;Program processors;Registers;Runtime,cryptography;embedded systems;microprocessor chips;pipeline processing;system monitoring,SCHEM framework;code execution;control flow instructions;control flow integrity verification;control flow monitoring;embedded processors;execution monitoring;hardware based execution monitoring;hardware based intrusion detection framework;instruction integrity monitoring;instruction level granularity;intrusion detection latency;low power overheads;pipeline processing;runtime control flow;stream cipher hash based execution monitoring;tamper-proof solution,,0,,14,,,27-29 June 2012,,IEEE,IEEE Conference Publications
Minos: Control Data Attack Prevention Orthogonal to Memory Model,"Crandall, J.R.; Chong, F.T.",University of California at Davis,"Microarchitecture, 2004. MICRO-37 2004. 37th International Symposium on",20051212,2004,,,221,232,"We introduce Minos, a microarchitecture that implements Biba's low-water-mark integrity policy on individual words of data. Minos stops attacks that corrupt control data to hijack program control flow but is orthogonal to the memory model. Control data is any data which is loaded into the program counter on control flow transfer, or any data used to calculate such data. The key is that Minos tracks the integrity of all data, but protects control flow by checking this integrity when a program uses the data for control transfer. Existing policies, in contrast, need to differentiate between control and non-control data a priori, a task made impossible by coercions between pointers and other data types such as integers in the C language. Our implementation of Minos for Red Hat Linux 6.2 on a Pentium-based emulator is a stable, usable Linux system on the network on which we are currently running a web server. Our emulated Minos systems running Linux and Windows have stopped several actual attacks. We present a microarchitectural implementation of Minos that achieves negligible impact on cycle time with a small investment in die area, and minor changes to the Linux kernel to handle the tag bits and perform virtual memory swapping.",1072-4451,0-7695-2126-6,,10.1109/MICRO.2004.26,http://ieeexplore.ieee.org.ezproxy.rit.edu/stamp/stamp.jsp?arnumber=1550996,,Computer science;Control systems;Counting circuits;Hardware;Internet;Kernel;Libraries;Linux;Microarchitecture;Protection,,,,64,30,36,,,04-08 Dec. 2004,,IEEE,IEEE Conference Publications
Augmenting Branch Predictor to Secure Program Execution,Yixin Shi; Gyungho Lee,"Univ. of Illinois at Chicago, Chicago","Dependable Systems and Networks, 2007. DSN '07. 37th Annual IEEE/IFIP International Conference on",20070716,2007,,,10,19,"Although there are various ways to exploit software vulnerabilities for malicious attacks, the attacks always result in unexpected behavior in program execution, deviating from what the programmer/user intends to do. Program execution blindly follows the execution path specified by control flow transfer instructions with the targets generated at run-time without any validation. An enhancement is therefore proposed to secure program execution by introducing a validation mechanism over control flow transfer instructions at micro-architecture level. The proposed scheme, as a behavior-based protection, treats a triplet of the indirect branch's location, its target address, and the execution path preceding it as a behavior signature of program execution and validates it at run-time. The first two pieces of information can prevent an adversary from overwriting control data and introducing foreign code or impossible targets to redirect an indirect branch. The last one is necessary to defeat the attacks that use a legitimate target but follow an unintended execution path. Interestingly, the branch predictor is found to contain the signature information already and doing a portion of the validation when resolving the branch, thus greatly reducing the validation frequency. An enhancement of branch target buffer (BTB) entry together with a signature table implemented in the form of a Bloom filter in hardware is proposed to incorporate the validation into the processor's pipeline, providing a new defense in the processor architecture to secure program execution.",,0-7695-2855-4,,10.1109/DSN.2007.19,http://ieeexplore.ieee.org.ezproxy.rit.edu/stamp/stamp.jsp?arnumber=4272951,Bloom Filter;Branch Predictor;Control Flow Validation;Indirect Branch;Software Protection,Control systems;Data mining;Data security;Decision making;Filters;Frequency;Hardware;Programming profession;Protection;Runtime,program diagnostics;program verification;security of data,branch target buffer;program execution security;software vulnerabilities;unintended execution path;validation mechanism,,3,,29,,,25-28 June 2007,,IEEE,IEEE Conference Publications
Symerton--using virtualization to accelerate packet processing,"Kunze, A.R.; Goglin, S.D.; Johnson, E.J.","Intel Corp. Technol. Group, Hillsboro, OR","Architecture for Networking and Communications systems, 2006. ANCS 2006. ACM/IEEE Symposium on",20080725,2006,,,133,142,"The complexity of packet-processing applications continues to grow, with encryption, compression, and XML processing becoming common on packet-processing devices at the edge of enterprise and service provider networks. While performance remains a key differentiator for these devices, the complexity and rate of change in the supported applications has made general-purpose platforms an attractive alternative to ASICs and network processors. General-purpose platforms offer excellent programmability and a wealth of existing software, in the form of operating systems, libraries, and applications that can be used to build a packet-processing system; however, the performance of general-purpose operating systems is unacceptable for many environments. This has driven developers to either make derivative versions of existing operating systems or to use special-purpose operating systems with a less comprehensive and familiar library of existing software. As part of the Symerton project, we propose using virtualization to address these issues. We have designed a system that has a virtual machine dedicated to high-performance networking, and a virtual machine dedicated to hosting non-performance critical tasks in a general-purpose operating system. Using a proof-of-concept implementation, we show that the resulting system outperforms a general-purpose operating system by an average of 22% for a real networking application. We also discuss tradeoffs that will need to be considered in further development of systems using this design.",,978-1-59593-580-9,,,http://ieeexplore.ieee.org.ezproxy.rit.edu/stamp/stamp.jsp?arnumber=4579531,communications systems;networking;virtualization,Acceleration;Application software;Buildings;Cryptography;Hardware;Operating systems;Sockets;Software libraries;Virtual machining;XML,computer networks;operating systems (computers);virtual machines,ASIC;Symerton project;XML processing;network processors;operating systems;packet processing complexity;proof-of-concept implementation;service provider networks;virtual machine,,0,6,17,,,3-5 Dec. 2006,,IEEE,IEEE Conference Publications
The LAIDS/LIDS framework for systematic IPS design,"Chung, S.P.; Mok, A.K.","Dept. of Comput. Sci., Univ. of Texas at Austin, TX","Information Assurance, 2006. IWIA 2006. Fourth IEEE International Workshop on",20060508,2006,,,9 pp.,11,"The recent outbreaks of extremely fast spreading worms highlight the inadequacy of the current patching approach. Intrusion prevention systems (IPSs) that automatically generate and apply protection to client systems have been proposed as a solution. Despite all the effort in this area, the design of IPSs remains a difficult, ad hoc process. In this paper, we propose the LAIDS/LIDS framework for systematic design of IPS. A major advantage of our framework is that IPSs designed in this framework have a very simple countermeasure-generation process. To better illustrate our idea, we have implemented a prototype IPS, the Lazy Shepherding IPS, based on our framework. Evaluation shows that the prototype is effective against all tested attacks, and incurs an overhead of less than 3% when it is configured to defend against a large number of attacks. Our prototype also avoids a lot of practical problems faced by many other IPSs",,0-7695-2564-4,,10.1109/IWIA.2006.21,http://ieeexplore.ieee.org.ezproxy.rit.edu/stamp/stamp.jsp?arnumber=1609996,,Computer worms;Concrete;Contracts;Detectors;Face detection;Intrusion detection;Phase detection;Protection;Prototypes;Testing,security of data,LAIDS/LIDS framework;Lazy Shepherding IPS;client systems;intrusion prevention systems,,0,,17,,,13-14 April 2006,,IEEE,IEEE Conference Publications
Memory Protection through Dynamic Access Control,"Zhang, K.; Tao Zhang; Santosh Pande","Coll. of Comput., Georgia Inst. of Technol., Atlanta, GA","Microarchitecture, 2006. MICRO-39. 39th Annual IEEE/ACM International Symposium on",20061226,2006,,,123,134,"Current anomaly detection schemes focus on control flow monitoring. Recently, Chen et al. discovered that a large category of attacks tamper program data but do not alter control flows. These attacks are not only realistic, but are also as important as classical attacks tampering control flows. Detecting these attacks is a critical issue but has received little attention so far. In this work, we propose an intrusion detection scheme with both compiler and micro-architecture support detecting data tampering directly. The compiler first identifies program regions in which the data should not be modified as per program semantics. Then the compiler performs an analysis to determine the conditions for modification of variables in different program regions and conveys this information to the hardware and the hardware checks the data accesses based on the information. If the compiler asserts that the data should not be modified but there is an attempt to do so at runtime, an attack is detected. The compiler starts with a basic scheme achieving maximum data protection but such a scheme also suffers from high performance overhead. We then attempt to reduce the performance overhead through different optimization techniques. Our experiments show that our scheme achieves strong memory protection with tight control over the performance degradation. Thus, our major contribution is to provide an efficient scheme to detect data tampering while minimizing the overhead",1072-4451,0-7695-2732-9,,10.1109/MICRO.2006.33,http://ieeexplore.ieee.org.ezproxy.rit.edu/stamp/stamp.jsp?arnumber=4041841,,Access control;Degradation;Hardware;Information analysis;Intrusion detection;Monitoring;Performance analysis;Program processors;Protection;Runtime,authorisation;optimising compilers;program control structures;system monitoring,anomaly detection;control flow monitoring;data protection;data tampering;dynamic access control;intrusion detection;memory protection;microarchitecture;optimization;program compiler;program semantics,,2,,27,,,9-13 Dec. 2006,,IEEE,IEEE Conference Publications
